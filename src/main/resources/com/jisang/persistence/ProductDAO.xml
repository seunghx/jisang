<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="com.jisang.persistence.ProductDAO">
 
 
 	<!-- ############################################# INSERT ####################################################### -->	
 	
 	<insert id="create" parameterType="com.jisang.domain.Product" useGeneratedKeys="true" keyProperty="id">
 		INSERT INTO
 			tbl_products
 			(product_category, product_name, product_price, product_detail, product_market_id, product_representing_image, product_recommended)
 		VALUES
 			(#{category}, #{name}, #{price}, #{detail}, #{marketId}, #{representingImageUrl}, #{recommended})
 	</insert> 	
 	
 	<!-- 해시 태그는 PRODUCT 도메인을 구성하는 정보이다. 하나의 PRODUCT에 대하여 여러 개의 해시태그가 존재하므로 해시태그에 대한 테이블을 따로 빼두었다.
 		 아직까지는 해시태그가 PRODUCT를 구성하는 문자열 데이터 이상의 의미를 갖지는 않기 때문에 따로 도메인으로 취급하지는 않았으며 그러므로 PRODUCT 도메인에 
 		 대한 data access를 수행 로직이 담긴 이 ProductDAO.xml 에 해시 태그에 대한 입력 기능을 정의하였다. -->
 	<insert id="createHashTags" parameterType="java.util.List">
 		INSERT INTO
 			tbl_hashtags(hashtag_content, hashtag_product_id)
 		VALUES
 			<foreach collection="hashTags" item="hashTag" separator=",">
 				(#{hashTag}, #{productId})
 			</foreach>
 	</insert>
 	
 	<!-- 상품 이미지(url)는 PRODUCT 도메인을 구성하는 정보이다. 하나의 PRODUCT에 대하여 여러 개의 상품 이미지가 존재하므로 이미지에 대한 테이블을 따로 빼두었다.
 		 아직까지는 상품 이미지가 PRODUCT를 구성하는 문자열 데이터(S3 URL) 이상의 의미를 갖지는 않기 때문에 따로 도메인으로 취급하지는 않았으며 그러므로 PRODUCT 
 		 도메인에 대한 data access를 수행 로직이 담긴 이 ProductDAO.xml 에 상품 이미지 url에 대한 입력 기능을 정의하였다. -->
 	<insert id="createImages" parameterType="java.util.List" >
 		INSERT INTO
 			tbl_images(image_url, image_product_id)
 		VALUES
 			<foreach collection="images" item="image" separator=",">
 				(#{image}, #{productId})
 			</foreach>
 	</insert>
 
 
 	<!-- ############################################## UPDATE ####################################################### -->
 	
 	
 	<update id="update" parameterType="com.jisang.domain.Product">
 		UPDATE
 			tbl_products
 		SET
 			product_category = #{category} AND product_name = #{name} AND product_price = #{price} 
 			AND product_detail = #{detail} AND product_representing_image = #{representingImageUrl} 
 			AND product_recommended = #{recommended}
 		WHERE
 			product_id = #{productId}
 	</update>
 	
 	<!-- 가능한한 업데이트는 위의 'update' 태그의 방식과 같이 제너럴하게 하고 싶었으나 조회수의 경우 이 하나의 칼럼의 값에 1을 추가하고자 전체 프로덕트 값을 모두 전달하여
 	업데이트하는 것은 비효율적인 것 같아 조회수 증가 쿼리를 따로 만들었다. -->
 	<update id="addHit" parameterType="int">
 		UPDATE
 			tbl_products
 		SET
 			product_hit_current = product_hit_current + 1
 		WHERE
 			product_id = #{productId}
 	</update>
 	
 	<!-- 상품 조회수 정보를 초기화한다. 상품 조회수를 초기화하지 않을 경우 18ss 시즌에 17fw 상품이 베스트 상품으로 올라올 가능성이 있다. 그래서 스케줄링을 이용하여 주기적으로
 	조회수를 리프레시 해줄 필요가 있다. 특정 기간(최근 몇 일)동안의 베스트 상품에 대한 기능이 필요하다고 할 때 데이터베이스 테이블에 조회 수 칼럼을 하나만 두었을 경우에는
 	리프레시와 동시에 모든 상품의 조회 수가 0이 될 수 있다. 가장 좋은 방법은 특정 기간의 단위 마다 즉 예를 들어 7일 이라면 하루를 하나의 단위로 하여 7개의 조회수 칼럼을 
 	데이터베이스에 둔 후 각각의 칼럼을 다음 날의 조회수 값으로 덮어 쓰는 방식으로 매일 리프레시 해주는 방법이다. 그러나 이런 방법의 경우 조회수를 세기 위하여 기준으로 두는 기간이 
 	바뀔 경우 테이블의 칼럼을 새로 추가|삭제해야만 한다. 아니면 새 테이블을 작성하는 방법도 있긴 하다. 그러나 무엇이되었든 복잡하기 때문에 나는 첫 번째 시나리오와 같이 간편하면서도
 	리프레시가 되어도 정보가 모두 0이 되지 않도록 두 개의 칼럼 product_hit_past, product_hit_current를 정의하였다. 물론 최근 몇 일 동안 베스트 상품 등에 대한 요구사항이 
 	생기면 이 방법은 사용하면 안되지만 현재의 지상 어플리케이션은 그렇게 세밀하게 계산되어진 조회수를 필요로 하지는 않다. 아래와 같은 방법으로도 대략 유사한 최근 며칠 간의 
 	베스트 상품 조회 등이 가능하다. 베스트 상품 목록 조회 기능 중에 pastHitWeight, currentHitWeight 등의 필드가 이용되는 경우가 있는데 이런 값들을 매일 업데이트할 경우
 	더 세밀한 조회수 탐색이 가능하다. -->
 	<update id="refreshHit">
 		UPDATE
 			tbl_products
 		SET
 			product_hit_past = product_hit_current, product_hit_current = 0
 	</update>
 	
 	<!-- ############################################## DELETE ####################################################### -->
 
 	<delete id="delete" parameterType="int">
 		DELETE FROM
 	 		tbl_products
 	 	WHERE
 	 		product_id = #{productId}
 	</delete>
 	 
 	<!-- 상품 해시태그는 PRODUCT 도메인을 구성하는 정보이다. 하나의 PRODUCT에 대하여 여러 개의 해시태그가 존재하므로 이미지에 대한 테이블을 따로 빼두었다.
 		 아직까지는 해시태그가 PRODUCT를 구성하는 문자열데이터 이상의 의미를 갖지는 않기 때문에 따로 도메인으로 취급하지는 않았으며 그러므로 PRODUCT 
 		 도메인에 대한 data access를 수행 로직이 담긴 이 ProductDAO.xml에 상품 해시태그에 대한 삭제 기능을 정의하였다. 삭제 작업은 업데이트 작업 이전에
 		 호출 된다. (foreign key가 ON DELETE CASCADE로 설정되어 있기 때문에 상품 삭제 시 'deleteProduct' 쿼리가 호출되면 해시태그는 함께 삭제된다.) -->
 	<delete id="deleteHashTags" parameterType="int">
 	 	DELETE FROM
 	 		tbl_hashtags
 	 	WHERE
 	 		hashtag_product_id = #{productId}
 	</delete>
 	 
 	<!-- 상품 이미지(url)는 PRODUCT 도메인을 구성하는 정보이다. 하나의 PRODUCT에 대하여 여러 개의 상품 이미지가 존재하므로 이미지에 대한 테이블을 따로 빼두었다.
 		 아직까지는 상품 이미지가 PRODUCT를 구성하는 문자열 데이터(S3 URL) 이상의 의미를 갖지는 않기 때문에 따로 도메인으로 취급하지는 않았으며 그러므로 PRODUCT 
 		 도메인에 대한 data access를 수행 로직이 담긴 이 ProductDAO.xml에 상품 이미지 url에 대한 삭제 기능을 정의하였다. 삭제 작업은 업데이트 작업 이전에
 		 호출 된다. (foreign key가 ON DELETE CASCADE로 설정되어 있기 때문에 상품 삭제 시 'deleteProduct' 쿼리가 호출되면 이미지는 함께 삭제된다.) -->
 	<delete id="deleteImages" parameterType="int">
 		DELETE FROM
 	 		tbl_images 
 	 	WHERE
 	 		image_product_id = #{productId}
 	</delete>
 	 
 	 	
 	<!-- ############################################## SELECT ####################################################### -->
 	
 	
 	<select id="read" parameterType="int" resultMap="productResultMap">
 		SELECT 
 			*
 		FROM
 			tbl_products
 		WHERE
 			product_id = #{productId}
 	</select>
 	
 	<!-- 전달 받은 인자 marketId에 해당하는 마켓 내의 모든 상품을 조회한다. ProductServiceImpl의 findProductListForManagement() 메서드에서만
 	  	 사용된다. 이 경우를 제외한 다른 상품 목록 화면에 필요한 정보는 다른 select 태그 이하의 쿼리에 의해 조회된다. -->
 	<select id="readListByMarketId" parameterType="int" resultMap="productResultMap">
 		SELECT
 			*
 		FROM
 			tbl_products
 		WHERE
 			product_market_id = #{marketId}
 	</select>
 	
 	<select id="readListBest" parameterType="com.jisang.dto.product.criteria.BestViewCriteria" resultMap="productResultMap">
 		SELECT
 	      	*
 		FROM
 			tbl_products
 		<where>
 			<if test="@com.jisang.support.MybatisMethodUtil@isSearchView(_parameter)">
 				<include refid="readProductListWithSearchKeyword">
 					<property name="keyword" value="${searchKeyword}" />
 				</include>
 			</if>
 			<include refid="readProductListCommonSql">
 				<property name="category" value="${category}" />
 				<property name="marketId" value="${marketId}" />
				<property name="mallLocation" value="${mallLocation}" />
			</include>
 		    ORDER BY (product_hit_current * #{currentHitWeight} + product_hit_past * #{pastHitWeight})
 		    DESC 
 		    LIMIT
 		    	0, #{bestViewCnt}
 		</where>
 	</select>
 	
 	<select id="readListRecommended" parameterType="com.jisang.dto.product.criteria.RecommendedViewCriteria" resultMap="productResultMap">
 		SELECT
 			*
 		FROM
 			tbl_products
 		<where>
 			<if test="@com.jisang.support.MybatisMethodUtil@isSearchView(_parameter)">
 				<include refid="readProductListWithSearchKeyword">
 					<property name="keyword" value="${searchKeyword}" />
 				</include>
 			</if>
 			<include refid="readProductListCommonSql">
 				<property name="category" value="${category}" />
 				<property name="marketId" value="${marketId}" />
 				<property name="mallLocation" value="${mallLocation}" />
 			</include>
 		    AND product_recommended = 1
 		    ORDER BY product_upload_time 
 		    DESC
 		    LIMIT 
 		    	 0, #{recommendedViewCnt}
 		</where>
 	</select>
 	
 	<select id="readListPage" parameterType="com.jisang.dto.product.criteria.PageViewCriteria" resultMap="productResultMap">
 		SELECT
 			*
 		FROM
 			tbl_products p
 		<where>
 			<if test="@com.jisang.support.MybatisMethodUtil@isSearchView(_parameter)">
 				<include refid="readProductListWithSearchKeyword">
 					<property name="keyword" value="${searchKeyword}" />
 				</include>
 			</if>

 			<include refid="readProductListCommonSql">
 				<property name="category" value="${category}" />
 				<property name="marketId" value="${marketId}" />
 				<property name="mallLocation" value="${mallLocation}" />
 			</include>
 		    ORDER BY product_upload_time 
 		    DESC
 		    <if test="perPageCnt != null">
 		    	LIMIT 
 		    		#{startProductIdx}, #{perPageCnt}
 		    </if>
 		</where>
 	</select>
 	
 	<select id="readProductTotalCount" parameterType="com.jisang.dto.product.ProductListViewConfigData" resultType="int">
 		SELECT 
 			COUNT(*)
 		FROM 
 			tbl_products
 		<where>
 			<if test="@com.jisang.support.MybatisMethodUtil@isSearchView(_parameter)">
 				<include refid="readProductListWithSearchKeyword">
 					<property name="keyword" value="${searchCriteria.keyword}" />
 				</include>
 				<!--  	product_id 
  					IN(SELECT DISTINCT hashtag_product_id FROM tbl_hashtags WHERE hashtag_content LIKE CONCAT('%', #{searchCriteria.keyword}, '%'))
 				-->
 			</if>
 			<include refid="readProductListCommonSql">
 				<property name="category" value="${category}" />
 				<property name="marketId" value="${marketId}" />
 				<property name="mallLocation" value="${mallLocation}" />
 			</include>
 		</where> 
 	</select>
 	
 	<select id="readListByDate" resultMap="productResultMap">
 		SELECT 
 			*
 		FROM
 			tbl_products
 		WHERE
 			product_market_id = #{marketId}
 		AND
 			DATE(product_upload_time) = #{uploadDate}
 	</select>
 	
 	
 	<!-- 상품 이미지(url)는 PRODUCT 도메인을 구성하는 정보이다. 하나의 PRODUCT에 대하여 여러 개의 상품 이미지가 존재하므로 이미지에 대한 테이블을 따로 빼두었다.
 		 아직까지는 상품 이미지가 PRODUCT를 구성하는 문자열 데이터(S3 URL) 이상의 의미를 갖지는 않기 때문에 따로 도메인으로 취급하지는 않았으며 그러므로 PRODUCT 
 		 도메인에 대한 data access를 수행 로직이 담긴 이 ProductDAO.xml에 상품 이미지 url에 대한 조회회 기능을 정의하였다. -->
 	<select id="readImages" parameterType="int" resultType="string">
  		SELECT 
  			image_url as url
  		FROM 
  			tbl_images
  		WHERE 
  			image_product_id = #{id}
  	</select>

  	
 	<!-- 해시 태그는 PRODUCT 도메인을 구성하는 정보이다. 하나의 PRODUCT에 대하여 여러 개의 상품 해시 태그가 존재하므로 이미지에 대한 테이블을 따로 빼두었다.
 		 아직까지는 해시 태그가 PRODUCT를 구성하는 데이터 이상의 의미를 갖지는 않기 때문에 따로 도메인으로 취급하지는 않았으며 그러므로 PRODUCT 
 		 도메인에 대한 data access를 수행 로직이 담긴 이 ProductDAO.xml 에 해시 태그에 대한 조회 기능을 정의하였다. -->
  	<select id="readHashes" parameterType="int" resultType="string">
  		SELECT 
  			hashtag_content as content
  		FROM 
  			tbl_hashtags
  		WHERE 
  			hashtag_product_id = #{id}
  	</select>
  	
  	
 	<!-- ############################################## ResultMap ####################################################### -->
 	
 	
 	<resultMap id="productResultMap" type="com.jisang.domain.Product">
 		<id property="id" column="product_id"/>
 	  <result property="category" column="product_category" />
 		<result property="name" column="product_name" />
 		<result property="price" column="product_price" />  
 		<result property="detail" column="product_detail" />
 		<result property="marketId" column="product_market_id" />
 		<result property="representingImageUrl" column="product_representing_image" /> 
 		<result property="uploadTime" column="product_upload_time" />
 		<result property="recommended" column="product_recommended" />
 		<collection property="imageUrls" column="product_id" fetchType="lazy" javaType="ArrayList" select="readImages" />
  	<collection property="hashTags" column="product_id" fetchType="lazy" javaType="ArrayList" select="readHashes" />
 	</resultMap>
 	
 	 	
 	<!-- ############################################## SQL ####################################################### -->
 	 
 	 
 	<sql id="readProductListCommonSql">
 		<if test="!@com.jisang.support.MybatisMethodUtil@isProductCategoryAll(category)">
 			product_category = '${category}'
 		</if>
 		<choose>
 			<when test="marketId != null">
 		    	AND product_market_id = ${marketId}
 		    </when>
 		    <when test='mallLocation != null and mallLocation != "" and !@com.jisang.support.MybatisMethodUtil@isLocationEntire(mallLocation)'>
 		    	AND product_market_id 
 		    	IN(SELECT market_id from tbl_markets WHERE market_location = '${mallLocation}') 
 		    </when>
 		</choose>
 	</sql>
 	
 	<sql id="readProductListWithSearchKeyword">
 		product_id 
  		IN(SELECT DISTINCT hashtag_product_id FROM tbl_hashtags WHERE hashtag_content LIKE CONCAT('%', '${keyword}', '%'))
 	</sql>
 </mapper>	